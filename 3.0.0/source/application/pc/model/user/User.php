<?php

namespace app\pc\model\user;

use think\Session;
use app\common\model\user\User as UserModel;
use app\common\service\VerifyCode as VerifyCodeService;

/**
 * 超管后台用户模型
 * Class User
 * @package app\pc\model\user
 */
class User extends UserModel
{
    /**
     * 超管后台用户登录
     * @param $data
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function login($data)
    {
        if(filter_var($data[$accountType],FILTER_VALIDATE_EMAIL))
        {
            $accountType = 'email';
        }else{
            $accountType = 'phone_number';
        }
        // 验证用户名密码是否正确
        if (!$user = $this->getLoginUser($data[$accountType], $data['password'], $accountType)) {
            $this->error = '登录失败, 用户名或密码错误';
            return false;
        }
        // 保存登录状态
        $this->loginState($user);
        return true;
    }
    public function register($data): bool
    {
        $accountType = $data['account_type'];
        if(empty($data[$accountType]))
        {
            $this->error = lang('passport.register.'.$accountType.'_empty');
            return false;
        }

        $validate = validate('Register','validate\\user');
        $validate->message([
            'email.email' => lang('email_error'),
            'phone_number.regex' => lang('phone_number_error'),
            'password.require'=> lang('passport.register.password_empty'),
            'password.confirm' => lang('passport.register.password_confirm_error'),
            'code.require' =>lang('passport.register.verify_code_empty'),
        ]);
        if(!$validate->check($data)){
            $this->error = $validate->getError();
            return false;
        }

        if (self::useGlobalScope(false)->where([
            $accountType => $data[$accountType]
        ])->find()) {
            $this->error = '该账号已经被注册！';
            return false;
        }
        $this->startTrans();
        try {
            $verifyCodeService = new VerifyCodeService();
            if(!$verifyCodeService->checkCode($data[$accountType],$data['code'],'user_register'))
            {
                $this->error = $verifyCodeService->getError();
                return false;
            }
            $this->allowField(true)->save([
                $accountType => $data[$accountType],
                'password' => fbshop_hash($data['password']),
                'wxapp_id' =>  self::$wxapp_id ?: 10001
            ]);

            $this->commit();
            $user = self::useGlobalScope(false)->with(['wxapp'])->where([
                'user_id' => $this['user_id']
            ])->find();
            // 保存登录状态
            $this->loginState($user);
            return true;
        } catch (\Exception $e) {
            $this->error = $e->getMessage();
            $this->rollback();
            return false;
        }

    }

    /*
    public function validate($rule = true, $msg = [], $batch = false)
    {
        return parent::validate($rule, $msg, $batch); // TODO: Change the autogenerated stub
    }
    */

    /**
     * 获取登录用户信息
     * @param $user_name
     * @param $password
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    private function getLoginUser( $user_name, $password,$accountType)
    {
        return self::useGlobalScope(false)->with(['wxapp'])->where([
            $accountType => $user_name,
            'password' => fbshop_hash($password),
            'is_delete' => 0
        ])->find();
    }



    /**
     * 用户信息
     * @param $user_id
     * @return null|static
     * @throws \think\exception\DbException
     */
    public static function detail($user_id)
    {
        return self::get($user_id);
    }

    /**
     * 更新信息
     * @param $data
     * @return bool
     */
    public function renew($data)
    {
        if ($data['password'] !== $data['password_confirm']) {
            $this->error = '确认密码不正确';
            return false;
        }
        // 更新管理员信息
        if ($this->save([
                $accountType => $data[$accountType],
                'password' => fbshop_hash($data['password']),
            ]) === false) {
            return false;
        }
        // 更新session
        Session::set('fbshop_user.user', [
            'user_id' => $this['user_id'],
            $accountType => $data[$accountType],
        ]);
        return true;
    }

}